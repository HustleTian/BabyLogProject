/** * Sample React Native App * https://github.com/facebook/react-native * @flow */import Storage from 'react-native-storage';import React, { Component,AsyncStorage } from 'react';import {Navigator} from 'react-native-deprecated-custom-components';import WelcomePage from './view/WelcomePage';import HomePage from './view/HomePage';import { View, Platform, BackHandler, DeviceEventEmitter } from 'react-native';import NetUtils from './common/NetUtils';import Urls from './common/urlCommands';import UserController from './common/UserController';var storage = new Storage({	// 最大容量，默认值1000条数据循环存储	size: 100000,		// 存储引擎：对于RN使用AsyncStorage，对于web使用window.localStorage	// 如果不指定则数据只会保存在内存中，重启后即丢失	storageBackend: AsyncStorage,		// 数据过期时间，默认一整天（1000 * 3600 * 24 毫秒），设为null则永不过期	defaultExpires: null,		// 读写时在内存中缓存数据。默认启用。	enableCache: true,		// 如果storage中没有相应数据，或数据已过期，	// 则会调用相应的sync方法，无缝返回最新数据。	// sync方法的具体说明会在后文提到	// 你可以在构造函数这里就写好sync的方法	// 或是在任何时候，直接对storage.sync进行赋值修改	// 或是写到另一个文件里，这里require引入	// sync: require('./common/sync')});storage.sync = {	// sync方法的名字必须和所存数据的key完全相同	// 方法接受的参数为一整个object，所有参数从object中解构取出	// 这里可以使用promise。或是使用普通回调函数，但需要调用resolve或reject。	userEvent(params){		let { resolve, reject, syncParams: { extraFetchOptions } } = params;		NetUtils.post(Urls.urls.searchOneUserEvent,			{uuid:extraFetchOptions.uuid},			(responseJSON)=>{				// console.warn(responseJSON.rows);				if(responseJSON && responseJSON.rows){					storage.save({						key: 'userEvent',						data: responseJSON.rows,					});					// 成功则调用resolve					resolve && resolve(responseJSON.rows);				}				else{					// 失败则调用reject					reject && reject(new Error('data parse error'));				}			}		);	}}global.storage = storage;export default class App extends Component<{}> {	constructor() {		super();		this.state = {			pageName: 'WelcomePage',			component: WelcomePage,			loadFlag: false,		}	}	/**	 * 配置场景动画	 * @param route 路由	 * @param routeStack 路由栈	 * @returns {*} 动画	 */	_configureScene(route) {		return Navigator.SceneConfigs.PushFromRight; // 右侧弹出	}		/**	 * 使用动态页面加载	 * @param route 路由	 * @param navigator 导航器	 * @returns {XML} 页面	 */	_renderScene(route, navigator) {		let Component = route.component;		this.navigator = navigator;		return <Component {...route.params} navigator={navigator} />;	}		componentWillMount() {		if (Platform.OS === 'android') {			BackHandler.addEventListener('hardwareBackPress', this.onBackAndroid);		}		this.getUserSubscription = DeviceEventEmitter.addListener('FirstPageGetUser',(events) =>{			if (events.user == null) {				this.setState({					loadFlag: true,				})			}else {				this.setState({					pageName: 'HomePage',					component: HomePage,					loadFlag: true,				})			}		});		UserController.getUser('FirstPageGetUser');	}		componentWillUnmount() {		if (Platform.OS === 'android') {			BackHandler.removeEventListener('hardwareBackPress', this.onBackAndroid);		}		this.getUserSubscription.remove();	}		onBackAndroid = () => {		const nav = this.navigator;		const routers = nav.getCurrentRoutes();		if (routers.length > 1) {			nav.pop();			return true;			}		return false;	};		render() {		if (this.state.loadFlag) {			return (	            <Navigator	                //指定了默认的页面，也就是启动app之后会看到的第一屏，需要两个参数，name跟component	                initialRoute={{name: this.state.pageName,component: this.state.component}}	                configureScene={route=>this._configureScene(route)}	                renderScene={(route, navigator)=>this._renderScene(route,navigator)}/>			);		}		else {			return (<View/>);		}	}}